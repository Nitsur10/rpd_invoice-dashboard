// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole @default(EMPLOYEE)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  sessions      Session[]
  auditLogs     AuditLog[]
  paymentUpdates PaymentUpdate[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([token])
}

// Invoice Management
model Invoice {
  id                String   @id @default(cuid())
  emailId           String   @unique
  subject           String
  fromEmail         String?
  fromName          String?
  receivedDate      DateTime
  category          String
  invoiceNumber     String   @unique
  amount            Float
  vendor            String
  dueDate           DateTime?
  oneDriveLink      String?
  xeroLink          String?
  processingStatus  String
  processedAt       DateTime
  
  // Source tracking - NEW
  sourceTab         String   // "tab1", "tab2", "tab3" or specific workflow names
  sourceWorkflowId  String?  // n8n workflow ID that created this record
  importBatchId     String?  // For tracking batch imports
  
  // Payment tracking
  paymentStatus     PaymentStatus @default(PENDING)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
  paymentNotes      String?
  confirmedBy       String?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastSyncedAt      DateTime?
  
  // Relations
  paymentUpdates    PaymentUpdate[]
  auditLogs         AuditLog[]
  
  @@index([emailId])
  @@index([invoiceNumber])
  @@index([vendor])
  @@index([paymentStatus])
  @@index([sourceTab])
  @@index([receivedDate])
  @@index([dueDate])
}

// Payment Update History
model PaymentUpdate {
  id            String   @id @default(cuid())
  invoiceId     String
  userId        String
  action        String   // "status_changed", "payment_confirmed", "notes_added"
  previousValue Json?
  newValue      Json
  notes         String?
  createdAt     DateTime @default(now())
  
  // Relations
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  
  @@index([invoiceId])
  @@index([userId])
}

// Audit Log for all system changes
model AuditLog {
  id          String   @id @default(cuid())
  entityType  String   // "invoice", "user", "payment"
  entityId    String
  action      String   // "create", "update", "delete"
  userId      String?
  changes     Json     // JSON object with before/after values
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  invoice     Invoice? @relation(fields: [entityId], references: [id])
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}

// Import Batch Tracking
model ImportBatch {
  id            String   @id @default(cuid())
  sourceTab     String
  workflowId    String
  totalRecords  Int
  successCount  Int
  failureCount  Int
  status        ImportStatus
  startedAt     DateTime
  completedAt   DateTime?
  errorLog      Json?
  createdAt     DateTime @default(now())
  
  @@index([sourceTab])
  @@index([status])
  @@index([createdAt])
}

// Sync Configuration
model SyncConfig {
  id              String   @id @default(cuid())
  sourceTab       String   @unique
  excelFileUrl    String?  // OneDrive/SharePoint URL
  sheetName       String
  syncInterval    Int      @default(900) // seconds (15 minutes default)
  isActive        Boolean  @default(true)
  lastSyncAt      DateTime?
  lastSyncStatus  String?
  mapping         Json     // Column mapping configuration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Client Configuration
model ClientAccess {
  id           String   @id @default(cuid())
  clientName   String
  clientEmail  String   @unique
  vendorFilter String[] // Array of vendor names this client can see
  isActive     Boolean  @default(true)
  accessToken  String?  @unique
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([clientEmail])
  @@index([accessToken])
}

// Enums
enum UserRole {
  ADMIN
  EMPLOYEE
  CLIENT
  VIEWER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  OVERDUE
  CANCELLED
  DISPUTED
}

enum ImportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  PARTIALLY_FAILED
}