import { NextRequest, NextResponse } from 'next/server';
import { jwtVerify, JWTPayload } from 'jose';

// Define protected routes
const protectedRoutes = ['/dashboard', '/invoices', '/admin', '/api'];
const adminOnlyRoutes = ['/admin'];
const authRoutes = ['/auth/login', '/auth/register', '/auth/forgot-password'];

interface TokenPayload extends JWTPayload {
  email: string;
  'custom:role': string;
  given_name: string;
  family_name: string;
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // Skip middleware for static files and API routes that don't need auth
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/api/health') ||
    pathname.startsWith('/api/webhook') ||
    pathname.includes('.') ||
    pathname === '/favicon.ico'
  ) {
    return NextResponse.next();
  }

  // Get auth session from cookies
  const sessionCookie = request.cookies.get('auth-session');
  const isAuthenticated = Boolean(sessionCookie);
  let userRole: string | null = null;

  // Verify and decode token if present
  if (sessionCookie) {
    try {
      const session = JSON.parse(sessionCookie.value);
      const token = session.idToken;
      
      // Verify JWT token (you might want to add proper JWT verification)
      if (token) {
        // Extract role from token payload
        const payload = JSON.parse(atob(token.split('.')[1])) as TokenPayload;
        userRole = payload['custom:role'];
        
        // Check if token is expired
        const currentTime = Math.floor(Date.now() / 1000);
        if (payload.exp && payload.exp < currentTime) {
          // Token expired, redirect to login
          return redirectToLogin(request.url);
        }
      }
    } catch (error) {
      console.error('Error parsing session:', error);
      // Invalid session, clear cookie and redirect to login
      const response = redirectToLogin(request.url);
      response.cookies.delete('auth-session');
      return response;
    }
  }

  // Handle auth routes (login, register, etc.)
  if (authRoutes.some(route => pathname.startsWith(route))) {
    if (isAuthenticated) {
      // User is already authenticated, redirect to dashboard
      return NextResponse.redirect(new URL('/dashboard', request.url));
    }
    return NextResponse.next();
  }

  // Handle protected routes
  if (protectedRoutes.some(route => pathname.startsWith(route))) {
    if (!isAuthenticated) {
      return redirectToLogin(request.url, pathname);
    }

    // Check admin-only routes
    if (adminOnlyRoutes.some(route => pathname.startsWith(route))) {
      if (userRole !== 'ADMIN') {
        return NextResponse.redirect(new URL('/unauthorized', request.url));
      }
    }

    // Add user info to request headers for API routes
    if (pathname.startsWith('/api/')) {
      const requestHeaders = new Headers(request.headers);
      requestHeaders.set('x-user-role', userRole || '');
      requestHeaders.set('x-user-authenticated', 'true');
      
      return NextResponse.next({
        request: {
          headers: requestHeaders,
        },
      });
    }

    return NextResponse.next();
  }

  // Root redirect
  if (pathname === '/') {
    if (isAuthenticated) {
      return NextResponse.redirect(new URL('/dashboard', request.url));
    } else {
      return NextResponse.redirect(new URL('/auth/login', request.url));
    }
  }

  return NextResponse.next();
}

function redirectToLogin(currentUrl: string, redirectTo?: string): NextResponse {
  const loginUrl = new URL('/auth/login', currentUrl);
  
  if (redirectTo && redirectTo !== '/auth/login') {
    loginUrl.searchParams.set('redirectTo', redirectTo);
  }
  
  return NextResponse.redirect(loginUrl);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};